/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.angularjs.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.rivetlogic.angularjs.model.Users;
import com.rivetlogic.angularjs.model.UsersModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Users service. Represents a row in the &quot;rivetlogic_angular_Users&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rivetlogic.angularjs.model.UsersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UsersImpl}.
 * </p>
 *
 * @author charles.rodriguez
 * @see UsersImpl
 * @see com.rivetlogic.angularjs.model.Users
 * @see com.rivetlogic.angularjs.model.UsersModel
 * @generated
 */
public class UsersModelImpl extends BaseModelImpl<Users> implements UsersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a users model instance should use the {@link com.rivetlogic.angularjs.model.Users} interface instead.
	 */
	public static final String TABLE_NAME = "rivetlogic_angular_Users";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "fullName", Types.VARCHAR },
			{ "company", Types.VARCHAR },
			{ "position", Types.VARCHAR },
			{ "password_", Types.VARCHAR },
			{ "age", Types.INTEGER },
			{ "state_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rivetlogic_angular_Users (userName VARCHAR(75) not null primary key,email VARCHAR(75) null,fullName VARCHAR(75) null,company VARCHAR(75) null,position VARCHAR(75) null,password_ VARCHAR(75) null,age INTEGER,state_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rivetlogic_angular_Users";
	public static final String ORDER_BY_JPQL = " ORDER BY users.userName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_angular_Users.userName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rivetlogic.angularjs.model.Users"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rivetlogic.angularjs.model.Users"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rivetlogic.angularjs.model.Users"));

	public UsersModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _userName;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setUserName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userName;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Users.class;
	}

	@Override
	public String getModelClassName() {
		return Users.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userName", getUserName());
		attributes.put("email", getEmail());
		attributes.put("fullName", getFullName());
		attributes.put("company", getCompany());
		attributes.put("position", getPosition());
		attributes.put("password", getPassword());
		attributes.put("age", getAge());
		attributes.put("state", getState());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String company = (String)attributes.get("company");

		if (company != null) {
			setCompany(company);
		}

		String position = (String)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		Integer age = (Integer)attributes.get("age");

		if (age != null) {
			setAge(age);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@Override
	public String getCompany() {
		if (_company == null) {
			return StringPool.BLANK;
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	@Override
	public String getPosition() {
		if (_position == null) {
			return StringPool.BLANK;
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		_position = position;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@Override
	public int getAge() {
		return _age;
	}

	@Override
	public void setAge(int age) {
		_age = age;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public Users toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Users)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UsersImpl usersImpl = new UsersImpl();

		usersImpl.setUserName(getUserName());
		usersImpl.setEmail(getEmail());
		usersImpl.setFullName(getFullName());
		usersImpl.setCompany(getCompany());
		usersImpl.setPosition(getPosition());
		usersImpl.setPassword(getPassword());
		usersImpl.setAge(getAge());
		usersImpl.setState(getState());

		usersImpl.resetOriginalValues();

		return usersImpl;
	}

	@Override
	public int compareTo(Users users) {
		String primaryKey = users.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Users)) {
			return false;
		}

		Users users = (Users)obj;

		String primaryKey = users.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Users> toCacheModel() {
		UsersCacheModel usersCacheModel = new UsersCacheModel();

		usersCacheModel.userName = getUserName();

		String userName = usersCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			usersCacheModel.userName = null;
		}

		usersCacheModel.email = getEmail();

		String email = usersCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			usersCacheModel.email = null;
		}

		usersCacheModel.fullName = getFullName();

		String fullName = usersCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			usersCacheModel.fullName = null;
		}

		usersCacheModel.company = getCompany();

		String company = usersCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			usersCacheModel.company = null;
		}

		usersCacheModel.position = getPosition();

		String position = usersCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			usersCacheModel.position = null;
		}

		usersCacheModel.password = getPassword();

		String password = usersCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			usersCacheModel.password = null;
		}

		usersCacheModel.age = getAge();

		usersCacheModel.state = getState();

		String state = usersCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			usersCacheModel.state = null;
		}

		return usersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{userName=");
		sb.append(getUserName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", company=");
		sb.append(getCompany());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", state=");
		sb.append(getState());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.rivetlogic.angularjs.model.Users");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>company</column-name><column-value><![CDATA[");
		sb.append(getCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Users.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Users.class };
	private String _userName;
	private String _email;
	private String _fullName;
	private String _company;
	private String _position;
	private String _password;
	private int _age;
	private String _state;
	private Users _escapedModel;
}